import yfinance as yf
import numpy as np
from PyQt5 import QtCore,QtWidgets,QtGui
from  matplotlib import pyplot as plt
import sys
import CrossHairCursor as CHC
import operator

OPDict = {">":operator.gt,"=":operator.eq,">":operator.lt}

class DataSourceGroup(QtWidgets.QGroupBox):
    def __init__(self,parent):
        super().__init__()

        self.MainWin = parent
        self.setTitle("資料設定")

        self.TickerLabel = QtWidgets.QLabel(parent = self,text = "代碼:")
        self.TickerBox = QtWidgets.QComboBox(self)
        self.TickerBox.addItems(["0050.TW","2330.TW"])
        self.TickerBox.currentIndexChanged.connect(self.getTicket)
        self.PeriodLabel = QtWidgets.QLabel(parent = self,text = "載入資料期間(從現在回朔):")
        self.DigitBox = QtWidgets.QSpinBox(self)
        self.DigitBox.setValue(1)
        self.DigitBox.setMinimum(1)
        self.DigitBox.setMaximum(12)
        self.DigitBox.valueChanged.connect(self.resetPeriod)
        self.UnitBox = QtWidgets.QComboBox(self)
        self.UnitBox.addItems(["日","月","年"])
        self.UnitBox.setCurrentIndex(1)
        self.UnitBox.currentIndexChanged.connect(self.changeDigitList)
        self.UnitBox.currentIndexChanged.connect(self.resetPeriod)
        self.getTicket()

        self.StartDateLabel = QtWidgets.QLabel(parent = self, text = "開始日期 (yyyy-mm-dd):")
        self.StartDate = QtWidgets.QLineEdit(self)
        self.StartDate.setText(str(self.Data.index.date[0]))
        self.EndDateLabel = QtWidgets.QLabel(parent = self, text = "結束日期 (yyyy-mm-dd):")
        self.EndDate = QtWidgets.QLineEdit(self)
        self.EndDate.setText(str(self.Data.index.date[-1]))

        self.StartButton = QtWidgets.QPushButton("更新資料")
        self.StartButton.clicked.connect(self.getData)

        self.layout = QtWidgets.QGridLayout(self)
        self.layout.addWidget(self.TickerLabel,0,0,2,2)
        self.layout.addWidget(self.TickerBox,0,2,2,2)
        self.layout.addWidget(self.PeriodLabel,2,0,2,2)
        self.layout.addWidget(self.DigitBox,2,2,2,1)
        self.layout.addWidget(self.UnitBox,2,3,2,1)
        self.layout.addWidget(self.StartDateLabel,4,0,2,2)
        self.layout.addWidget(self.StartDate,4,2,2,2)
        self.layout.addWidget(self.EndDateLabel,6,0,2,2)
        self.layout.addWidget(self.EndDate,6,2,2,2)
        self.layout.addWidget(self.StartButton,8,1,2,2)

        self.setLayout(self.layout)
    
    def changeDigitList(self):
        if self.UnitBox.currentIndex() == 0:
            self.DigitBox.setValue(1)
            self.DigitBox.setMinimum(1)
            self.DigitBox.setMaximum(31)
        if self.UnitBox.currentIndex() == 2:
            self.DigitBox.setValue(1)
            self.DigitBox.setMinimum(1)
            self.DigitBox.setMaximum(20)
        if self.UnitBox.currentIndex() == 1:
            self.DigitBox.setValue(1)
            self.DigitBox.setMinimum(1)
            self.DigitBox.setMaximum(12)

    def transferUnit(self):
        if self.UnitBox.currentIndex() == 0:
            Unit = "d"
        if self.UnitBox.currentIndex() == 2:
            Unit = "y"
        if self.UnitBox.currentIndex() == 1:
            Unit = "mo"
        return Unit

    def getTicket(self):
        self.Ticket = yf.Ticker(self.TickerBox.currentText())
        self.Unit = self.transferUnit()
        self.Period = str(self.DigitBox.value()) + self.Unit
        self.Data = self.Ticket.history(period = self.Period)
    
    def resetPeriod(self):
        self.Unit = self.transferUnit()
        self.Period = str(self.DigitBox.value()) + self.Unit
        self.Data = self.Ticket.history(period = self.Period)
        self.resetDate()

    def resetDate(self):
        self.StartDate.setText(str(self.Data.index.date[0]))
        self.EndDate.setText(str(self.Data.index.date[-1]))

    def updateTicket(self):
        self.PeriodData = self.Data.loc[self.StartDate.text():self.EndDate.text()]
        self.Date = self.PeriodData.axes[0].to_list()

    def getData(self):
        self.updateTicket()
        #self.DefaultAnalysis() 
        self.MainWin.Metric.setEnabled(True)
        self.MainWin.Condition.setEnabled(True)  
        self.MainWin.Metric.packData(self.PeriodData)     
    
    def DefaultAnalysis(self):
        High = self.PeriodData["High"]
        Low = self.PeriodData["Low"]
        Close = self.PeriodData["Close"]

        Cash = 1
        BuyCount = 0
        SellCount = 0
        for n in range(1,len(High)):
            if Close[n] > High[n-1]:
                Cash = Cash - 1 # Buy
                BuyCount = BuyCount + 1
            elif Close[n] < Low[n-1]:
                Cash = Cash + 1 # Sell
                SellCount = SellCount +1
        
        Message = "這段期間裡你賺了 %d元, 其中包含了 %d次 的買進 和 %d次的 賣出"%(Cash, BuyCount, SellCount)
        QtWidgets.QMessageBox.information(None,"Result",Message)

class ColorDelegate(QtWidgets.QStyledItemDelegate):
    """This class is generated by chatGPT"""
    def paint(self, painter, option, index):
        # Get the color data from the model
        color = index.data(QtCore.Qt.UserRole)

        # Draw the color rectangle
        rect = option.rect.adjusted(2, 2, -20, -2)
        painter.fillRect(rect, QtGui.QColor(color))

        # Draw the item text
        text_rect = QtCore.QRect(rect.right() + 5, rect.top(), 200, rect.height())
        painter.drawText(text_rect, QtCore.Qt.AlignVCenter, index.data(QtCore.Qt.DisplayRole))


def convertQColorToQIcon(color):
    # color: QColor 
    # Create a QPixmap object with the desired size and color
    sizeV = 15  # desired size of the icon in pixels
    sizeH = 20
    pixmap = QtGui.QPixmap(sizeH, sizeV)
    pixmap.fill(color)

    # Create a QIcon object from the pixmap
    icon = QtGui.QIcon(pixmap)

    return icon

def ColorSelectComboBox(self,ColorList):
    ColorBox = QtWidgets.QComboBox(self)
    for color in ColorList:
        ColorBox.addItem(convertQColorToQIcon(QtGui.QColor(color)),"")    
    return ColorBox        

class MetricGroup(QtWidgets.QGroupBox):
    def __init__(self,parent):
        super().__init__()

        self.MainWin = parent
        self.setTitle("技術線型")
        self.OptionDict ={0:"Open",1:"Close",2:"High",3:"Low"}
           
        self.MainWin.sig_FoundPoints.connect(self.plotBlocks)

        self.RawCB = QtWidgets.QCheckBox(self)
        self.RawCB.setText("完整資料")

        self.DayBoxCB = QtWidgets.QCheckBox(self)
        self.DayBoxCB.setText("日K線")

        self.DayLineCB = QtWidgets.QCheckBox(self)
        self.DayLineCB.setText("日線")

        self.DayLineOpt = QtWidgets.QComboBox(self)
        self.DayLineOpt.addItems(["開盤","收盤","最高","最低"])

        self.DayLineColor = ColorSelectComboBox(self,self.MainWin.ColorList)               

        self.AvgCB = QtWidgets.QCheckBox(self)
        self.AvgCB.setText("平均線")
        self.AvgCB.clicked.connect(self.checkAvgBox)

        self.AvgDaysBox = QtWidgets.QSpinBox(self)
        self.AvgDaysBox.setMinimum(3)
        self.AvgDaysBox.setMaximum(20)
        self.AvgDaysBox.setValue(10)
        self.AvgDaysBox.setDisabled(True)

        self.AvgDaysText = QtWidgets.QLabel(parent = self)
        self.AvgDaysText.setText("天平均")

        self.AvgDaysColor = ColorSelectComboBox(self,self.MainWin.ColorList)
        
        self.AvgMonCB = QtWidgets.QCheckBox(self)
        self.AvgMonCB.setText("月平均線")
        self.AvgMonCB.setDisabled(True)

        self.AvgMonColor = ColorSelectComboBox(self,self.MainWin.ColorList)

        self.RSICB = QtWidgets.QCheckBox(self)
        self.RSICB.setText("RSI")
        self.RSICB.clicked.connect(self.checkRSIBox)

        self.RSIDaysBox = QtWidgets.QSpinBox(self)
        self.RSIDaysBox.setMinimum(3)
        self.RSIDaysBox.setMaximum(20)
        self.RSIDaysBox.setValue(10)
        self.RSIDaysBox.setDisabled(True)

        self.RSIDaysText = QtWidgets.QLabel(parent = self)
        self.RSIDaysText.setText("天RSI")
        
        self.RSIDaysColor = ColorSelectComboBox(self,self.MainWin.ColorList)

        self.PlotButton = QtWidgets.QPushButton(self)
        self.PlotButton.setText("觀察技術線")
        self.PlotButton.clicked.connect(self.plotCurves)

        self.Layout = QtWidgets.QGridLayout(self)
        self.Layout.addWidget(self.RawCB,0,0,1,2)
        self.Layout.addWidget(self.DayBoxCB,0,2,1,2)
        self.Layout.addWidget(self.DayLineCB,1,0,1,2)
        self.Layout.addWidget(self.DayLineOpt,1,2,1,1)
        self.Layout.addWidget(self.DayLineColor,1,4,1,1)
        self.Layout.addWidget(self.AvgCB,2,0,1,2)
        self.Layout.addWidget(self.AvgDaysBox,2,2,1,1)
        self.Layout.addWidget(self.AvgDaysText,2,3,1,1)
        self.Layout.addWidget(self.AvgDaysColor,2,4,1,1)
        self.Layout.addWidget(self.AvgMonCB,3,0,1,2)
        self.Layout.addWidget(self.AvgMonColor,3,4,1,1)
        self.Layout.addWidget(self.RSICB,4,0,1,2)
        self.Layout.addWidget(self.RSIDaysBox,4,2,1,1)
        self.Layout.addWidget(self.RSIDaysText,4,3,1,1)
        self.Layout.addWidget(self.RSIDaysColor,4,4,1,1)
        self.Layout.addWidget(self.PlotButton,5,1,1,2)

        self.setLayout(self.Layout)
        self.CrossHairPlot = CHC.CrosshairPlotWidget(parent = self, title = "本和里發財燒臘")

    def plotCurves(self):
        
        if self.DayBoxCB.isChecked():
            self.CrossHairPlot.plotBoxChart(self.PackedRaw,self.Date)
        
        if self.DayLineCB.isChecked():
            Option = self.DayLineOpt.currentIndex()
            self.RawData = self.MainWin.DataSource.PeriodData[self.OptionDict[Option]]
            QColor = self.MainWin.ColorList[self.DayLineColor.currentIndex()]
            self.CrossHairPlot.plot(self.RawData.values,np.arange(self.RawData.values.shape[0]),QColor)

        if self.AvgCB.isChecked():
            RawData = self.MainWin.DataSource.PeriodData["Close"]
            self.calculateMetric(type = "DayAvg",Data = RawData.values)
            QColor = self.MainWin.ColorList[self.AvgDaysColor.currentIndex()]
            self.CrossHairPlot.plot(self.RollingAvg[0],self.RollingAvg[1],QColor)
        
    def packData(self,RawData):
        OpenData = RawData["Open"]
        CloseData = RawData["Close"]
        HighData = RawData["High"]
        LowData = RawData["Low"]

        self.Date = self.getDate(LowData)
        self.PackedRaw = [(O,C,H,L) for O,C,H,L in zip(OpenData,CloseData,HighData,LowData)]

    def getDate(self,TicketData):
        Date = TicketData.axes[0]
        return [str(date)[0:10] for date in Date]

    def calculateMetric(self,type,Data):
        if type  == "DayAvg":
            AvgDays = self.AvgDaysBox.value()
            Kernel = self.createKernel(type = "DayAvg",AvgDay = AvgDays,Length = len(Data))
            RollingAvg = np.dot(Data,Kernel)/AvgDays
            #self.RollingAvg = np.concatenate((np.asarray([0]*AvgDays),self.RollingAvg))
            self.RollingAvg = [RollingAvg,np.arange(AvgDays,len(Data),1)]

    def createKernel(self,type,AvgDay,Length):
        if type == "DayAvg":         
            Kernel = np.zeros(shape = (Length,Length-AvgDay))
            for n in range(Length-AvgDay):
                Kernel[n:n+AvgDay,n] = 1
            #print(Kernel)
            return Kernel

    def checkAvgBox(self):
        if self.AvgDaysBox.isEnabled():
            self.AvgDaysBox.setDisabled(True)
        else:
            self.AvgDaysBox.setEnabled(True)
    
    def checkRSIBox(self):
        if self.RSIDaysBox.isEnabled():
            self.RSIDaysBox.setDisabled(True)
        else:
            self.RSIDaysBox.setEnabled(True)
    
    QtCore.pyqtSlot(list)
    def plotBlocks(self,FoundPoints):
        for points in FoundPoints:
            self.CrossHairPlot.plotZone(points[0],0,points[1])
            #for point in points[0]:
            #    print(point,self.Date[point])

class Condition(QtWidgets.QWidget):
    def __init__(self,parent):
        super().__init__()
        self.ConditionWin = parent

        self.MetricsOption1 = QtWidgets.QComboBox(self)
        self.MetricsOption1.addItems(self.ConditionWin.MainWin.MetricList)
        self.MetricsOption1.currentTextChanged.connect(lambda func:self.changeMetricCondition(1,self.MetricsOption1.currentText()))

        self.MetricsCondition1 = QtWidgets.QComboBox(self)
        self.MetricsCondition1.addItems(["開盤","收盤","最高","最低"])

        self.Condition = QtWidgets.QComboBox(self)
        self.Condition.addItems(["<","=",">"])

        self.MetricsOption2 = QtWidgets.QComboBox(self)
        self.MetricsOption2.addItems(self.ConditionWin.MainWin.MetricList)

        self.MetricsCondition2 = QtWidgets.QComboBox(self)
        self.MetricsCondition2.addItems(["開盤","收盤","最高","最低"])
        self.MetricsOption2.currentTextChanged.connect(lambda func:self.changeMetricCondition(2,self.MetricsOption2.currentText()))

        self.LabelColor = ColorSelectComboBox(self,self.ConditionWin.MainWin.ColorList)

        self.Layout = QtWidgets.QGridLayout(self)
        self.Layout.addWidget(self.MetricsOption1,0,0,1,1)
        self.Layout.addWidget(self.MetricsCondition1,0,1,1,1)
        self.Layout.addWidget(self.Condition,0,2,1,1)        
        self.Layout.addWidget(self.MetricsOption2,0,3,1,1)
        self.Layout.addWidget(self.MetricsCondition2,0,4,1,1)
        self.Layout.addWidget(self.LabelColor,0,5,1,1)
        
        self.setLayout(self.Layout)

    def changeMetricCondition(self,idx,txt):
        match idx:
            case 1:
                if txt == "日線":
                    self.MetricsCondition1.setEnabled(True)
                else:
                    self.MetricsCondition1.setDisabled(True)
            case 2:
                if txt == "日線":
                    self.MetricsCondition2.setEnabled(True)
                else:
                    self.MetricsCondition2.setDisabled(True)
            case _:
                pass

class ConditionGroup(QtWidgets.QGroupBox):
    def __init__(self,parent):
        super().__init__()
        self.MainWin = parent
        self.setTitle("條件分析")

        self.ConditionList = list()
        self.Condition1 = Condition(self)
        self.ConditionList.append(self.Condition1)
        
        self.AnalyzeButton = QtWidgets.QPushButton(self)
        self.AnalyzeButton.setText("標示區間")
        self.AnalyzeButton.clicked.connect(self.pickDataPoint)

        self.PMLabel = QtWidgets.QLabel(parent = self, text = "標記+/-")
        self.DaysLabel = QtWidgets.QLabel(parent = self, text = "天")
        self.DaySpinBox = QtWidgets.QSpinBox(self)
        self.DaySpinBox.setValue(5)
        self.DaySpinBox.setMinimum(0)
        self.DaySpinBox.setMaximum(30)

        self.Layout = QtWidgets.QGridLayout(self)
        self.Layout.addWidget(self.Condition1,0,0,1,4)
        self.Layout.addWidget(self.PMLabel,1,0,1,1)
        self.Layout.addWidget(self.DaySpinBox,1,1,1,1)
        self.Layout.addWidget(self.DaysLabel,1,2,1,1)
        self.Layout.addWidget(self.AnalyzeButton,1,3,1,1)

        self.setLayout(self.Layout)
    
    def pickDataPoint(self):
        Data1 = list()
        Data2 = list()
        Operator = list()
        Colors = list()
        for Condition in self.ConditionList:
            Option1 = None
            Option2 = None
            Metric1 = Condition.MetricsOption1.currentText()
            if Condition.MetricsCondition1.isEnabled():
                Option1 = Condition.MetricsCondition1.currentText()
            else:
                Metric1 = Metric1[-3:]
            Metric2 = Condition.MetricsOption2.currentText()
            if Condition.MetricsCondition2.isEnabled():
                Option2 = Condition.MetricsCondition2.currentText()
            else:
                Metric2 = Metric2[-3:]
            Data1.append(self.getData(Metric1,Option1))
            Data2.append(self.getData(Metric2,Option2))
            Operator.append(Condition.Condition.currentText())

            Colors.append(self.MainWin.ColorList[Condition.LabelColor.currentIndex()])
        
            FoundPoints = self.compareData(Data1,Data2,Operator)
        self.MainWin.sig_FoundPoints.emit([(fp,color) for fp, color in zip(FoundPoints,Colors)])
    
    def compareData(self,Data1,Data2,Operator):
        Points = list()
        for data1, data2, op in zip(Data1,Data2,Operator):
            d0 = max(data1[1][0],data2[1][0])
            if data1[1][0] == d0:
                offset = np.where(data2[1]==d0)[0][0]
                data2[0] = data2[0][offset:]
                data2[1] = data2[1][offset:]
            else:
                offset = np.where(data1[1]==d0)[0][0]
                data1[0] = data1[0][offset:]
                data1[1] = data1[1][offset:]
            if op == ">":
                data = data1[0] - data2[0]
            else:
                data = data2[0] - data1[0]
            data = np.multiply(np.insert(data,0,0),np.append(data,0))
            points = np.where(data < 0)[0]
            Points.append([data1[1][idx-1] for idx in points.tolist() if idx < data1[1].shape[0] and data[idx+1] > 0])
        return Points              

                
    def getData(self,text,Option = None):
        match text:
            case "日線":
                DateSN = np.arange(len(self.MainWin.Metric.PackedRaw))
                Data = self.MainWin.DataSource.PeriodData
                match Option:
                    case "開盤":
                        Data = Data["Open"]
                    case "收盤":
                        Data = Data["Close"]
                    case "最高":
                        Data = Data["High"]
                    case "最低":
                        Data = Data["Low"]
                    case _:
                        pass
                Data = [Data.values,DateSN]
            case "日均線":
                Data = self.MainWin.Metric.RollingAvg
            case "RSI":
                pass
            case _:
                pass
        
        return Data
    
class MainWin(QtWidgets.QWidget):
    sig_FoundPoints = QtCore.pyqtSignal(list)

    def __init__(self):
        super().__init__()

        self.setWindowTitle("王家肉燥飯")
        self.ColorList = ["red","blue","green","white","purple","cyan","orange"]
        self.MetricList = ["日線","日均線","RSI"]

        self.DataSource = DataSourceGroup(self)
        self.Metric = MetricGroup(self)
        self.Condition = ConditionGroup(self)
        self.Metric.setDisabled(True)
        self.Condition.setDisabled(True)

        self.Layout = QtWidgets.QGridLayout()
        self.Layout.addWidget(self.DataSource,0,0,2,2)
        self.Layout.addWidget(self.Metric,2,0,2,2)
        self.Layout.addWidget(self.Condition,4,0,2,2)
        self.setLayout(self.Layout)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    win = MainWin()
    win.show()
    sys.exit(app.exec_())